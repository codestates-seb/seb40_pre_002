group = 'pre_002'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext { // API snippets 생성
	set('snippetsDir', file("build/generated-snippets"))
}

configurations { // API 의존그룹 지정
	asciidoctorExtensions
}

dependencies {
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'


	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Spring Security 적용 위한 의존 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JWT 적용 위한 의존 라이브러리
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'

//	runtimeOnly 'com.h2database:h2' // InMemory DB
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final' // mapper
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final' // mapper

	implementation 'com.google.code.gson:gson'
	runtimeOnly 'mysql:mysql-connector-java' // mysql



	// 서버 환경 변수 설정 라이브러리
	implementation group: 'io.awspring.cloud', name: 'spring-cloud-starter-aws-parameter-store-config'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-parent', version: 'Hoxton.SR12', ext: 'pom'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config:2.2.6.RELEASE'
}








///*
//* 서버 환경 변수 설정
//* */
dependencyManagement {
	imports {
		mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:2.3.3"
	}
}


//tasks.named('test') {
//	outputs.dir snippetsDir
//	useJUnitPlatform()
//}



// snippets 디렉토리 경로 지정
tasks.named('asciidoctor') {
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	println "asciidoctor output: ${asciidoctor.outputDir}"
	from file("build/docs/asciidoc/")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

bootJar {
	dependsOn copyDocument
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}
